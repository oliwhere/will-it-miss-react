{"version":3,"sources":["components/Hazard.js","components/Passing.js","components/Orbital.js","App.js","serviceWorker.js","index.js"],"names":["YesOrNO","Map","Hazard","yes","className","get","Passing","data","map","_","i","key","orbiting_body","Intl","DateTimeFormat","timeStyle","format","epoch_date_close_approach","NumberFormat","style","miss_distance","kilometers","unit","relative_velocity","kilometers_per_hour","Orbital","name","is_potentially_hazardous_asteroid","close_approach_data","nasa_jpl_url","replace","href","target","day","getDate","addDays","Date","d","toJSON","split","fetchData","fetch","then","res","json","App","useAsync","loading","document","title","hazards","result","near_earth_objects","reduce","acc","curr","results","weekday","month","length","sort","a","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qNAEMA,EAAU,IAAIC,IAAI,CACpB,EAAC,EAAM,oBACP,EAAC,EAAO,UAGG,SAASC,EAAT,GAA0B,IAARC,EAAO,EAAPA,IACjC,OAAO,0BAAMC,UAAU,UAAWJ,EAAQK,IAAIF,ICN/B,SAASG,EAAT,GACX,OADsC,EAARC,KAClBC,KAAI,SAACC,EAAGC,GAAJ,OACZ,uBAAGC,IAAKD,GAAR,UACYD,EAAEG,cADd,eACyC,IACpC,IAAIC,KAAKC,eAAe,QAAS,CAAEC,UAAW,UAAWC,OAAOP,EAAEQ,2BAFvE,MAEsG,IAFtG,IAE4G,IAAIJ,KAAKK,aAAa,QAAS,CAAEC,MAAO,YAAaH,OAAOP,EAAEW,cAAcC,YAFxL,oCAGQ,IAAIR,KAAKK,aAAa,QAAS,CAAEC,MAAO,OAAQG,KAAM,uBAAwBN,OAAOP,EAAEc,kBAAkBC,yBCH1G,SAASC,EAAT,GAKX,IAJAC,EAID,EAJCA,KACAC,EAGD,EAHCA,kCACAC,EAED,EAFCA,oBACAC,EACD,EADCA,aAEA,OACI,yBAAKzB,UAAWuB,EAAoC,YAAc,aAC9D,4BAAKD,EAAKI,QAAQ,QAAS,KAC3B,oDAC2B,IACvB,kBAAC5B,EAAD,CAAQC,IAAKwB,KAEjB,kBAACrB,EAAD,CAASC,KAAMqB,IACf,uBAAGxB,UAAU,QACT,uBAAG2B,KAAMF,EAAcG,OAAO,UAA9B,mBCdhB,IACMC,EAAMC,EAAQC,YAAQ,IAAIC,KAAQ,IAExC,SAASF,IAAyB,IAAjBG,EAAgB,uDAAZ,IAAID,KACvB,OAAOC,EAAEC,SAASC,MAAM,KAAK,GAG/B,IAAMC,EAAY,kBAChBC,MAAM,oDAAD,OACiDP,IADjD,oBARS,6CAUZQ,MAAK,SAACC,GAAD,OAASA,EAAIC,WA2CPC,MAzCf,WACE,IAAMtC,EAAOuC,mBAASN,EAAW,IAEjC,GAAIjC,EAAKwC,QAGP,OAFAC,SAASC,MAAQ,sCAGf,sIAOJ,IAAMC,EAAU3C,EAAK4C,OAAOC,mBAAmBnB,GAAKoB,QAAO,SAACC,EAAKC,GAC/D,OAAIA,EAAK5B,kCACA2B,EAAM,EAERA,IACN,GAEHN,SAASC,MAAT,UAAoBC,EAApB,8BAAiDA,EAAU,EAAI,iBAAmB,iBAElF,IAAMM,EAAUjD,EAAK4C,OAAOC,mBAAmBnB,GAE/C,OACE,6BACE,2BACG,IAAIpB,KAAKC,eAAe,QAAS,CAAE2C,QAAS,OAAQC,MAAO,QAASzB,IAAK,YAAajB,OAAOmB,YAAQ,IAAIC,KAAQ,IADpH,iBACuI,IACrI,gCAASoB,EAAQG,QAFnB,gBAIA,6BACCH,EACII,MAAK,SAACC,GAAD,OAAQA,EAAElC,mCAAqC,EAAI,KACxDnB,KAAI,SAACD,GAAD,OACH,kBAACkB,EAAD,eAASd,IAAKJ,EAAKuD,IAAQvD,SCxCnBwD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFtB,SAASuB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.bb2468d4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst YesOrNO = new Map([\r\n    [true, 'YES ðŸ˜±'],\r\n    [false, 'nope']\r\n]);\r\n\r\nexport default function Hazard({ yes }) {\r\nreturn <span className=\"hazard\">{ YesOrNO.get(yes) }</span>\r\n}","import React from 'react';\r\n\r\nexport default function Passing({ data }) {\r\n    return data.map((_, i) => (\r\n        <p key={i}>\r\n            Misses {_.orbiting_body} tomorrow at{' '}\r\n            {new Intl.DateTimeFormat('de-DE', { timeStyle: 'short' }).format(_.epoch_date_close_approach)} by{' '} {new Intl.NumberFormat('de-DE', { style: 'decimal' }).format(_.miss_distance.kilometers)} kilometres whilst travelling\r\n            at {new Intl.NumberFormat('de-DE', { style: 'unit', unit: 'kilometer-per-hour' }).format(_.relative_velocity.kilometers_per_hour)}\r\n        </p>\r\n    ));\r\n}","import React from 'react';\r\nimport Hazard from './Hazard';\r\nimport Passing from './Passing';\r\n\r\nexport default function Orbital({\r\n    name,\r\n    is_potentially_hazardous_asteroid,\r\n    close_approach_data,\r\n    nasa_jpl_url,\r\n}) {\r\n    return (\r\n        <div className={is_potentially_hazardous_asteroid ? 'is-hazard' : 'no-hazard'}>\r\n            <h2>{name.replace(/[()]/g, '')}</h2>\r\n            <p>\r\n                Potentially hazardous?{' '}\r\n                <Hazard yes={is_potentially_hazardous_asteroid} />\r\n            </p>\r\n            <Passing data={close_approach_data} />\r\n            <p className=\"more\">\r\n                <a href={nasa_jpl_url} target=\"_blank\">\r\n                    Find out more\r\n                </a>\r\n            </p>\r\n        </div>\r\n    );\r\n}","import React from 'react';\nimport { useAsync } from 'react-async-hook';\nimport addDays from 'date-fns/addDays';\nimport Orbital from './components/Orbital';\n\nconst API_KEY = 'oBI2u3JcmWxBCS1uQle8OdCNkVZJXii5zBFdYRzt';\nconst day = getDate(addDays(new Date(), 1));\n\nfunction getDate(d = new Date()) {\n  return d.toJSON().split('T')[0];\n}\n\nconst fetchData = () =>\n  fetch(\n    `https://api.nasa.gov/neo/rest/v1/feed?start_date=${getDate()}&api_key=${API_KEY}`\n  ).then((res) => res.json());\n\nfunction App() {\n  const data = useAsync(fetchData, []);\n\n  if (data.loading) {\n    document.title = 'Counting potential earth HAZARDS...';\n\n    return (\n      <p>\n        Getting data from NASA right now to check wheter something from space\n        is going to hit us. One moment...\n      </p>\n    );\n  }\n\n  const hazards = data.result.near_earth_objects[day].reduce((acc, curr) => {\n    if (curr.is_potentially_hazardous_asteroid) {\n      return acc + 1;\n    }\n    return acc;\n  }, 0);\n\n  document.title = `${hazards} potential HAZARDS ${hazards > 0 ? 'OMG WE GON DIE' : 'Phew we gucci'}`;\n\n  const results = data.result.near_earth_objects[day];\n\n  return (\n    <div>\n      <p>\n        {new Intl.DateTimeFormat('en-GB', { weekday: 'long', month: 'short', day: 'numeric' }).format(addDays(new Date(), 1))} there will be{' '}\n        <strong>{results.length}</strong> near misses\n      </p>\n      <hr></hr>\n      {results\n          .sort((a) => (a.is_potentially_hazardous_asteroid ? -1 : 1))\n          .map((data) => (\n            <Orbital key={data.id} {...data} />\n          ))}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}